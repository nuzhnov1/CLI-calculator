-------------------------------------------------------------------------------------------------
Abstract syntax:                                                                                |
-------------------------------------------------------------------------------------------------
Statement: lvalue assign expr                                                                   |
Statement: (command | expr) EOL                                                                 |
Expr: unOpLeft? term UnOpRight? (binOp expr)?                                                   |
Term: rvalue | lvalue | ("(" expr ")") | functionCall                                           |
FunctionCall: ident "(" (expr ("," expr)* )? ")"                                                |
UnOpLeft: "+" | "-"                                                                             |
UnOpRight: "!" | "%"                                                                            |
BinOp: "+" | "-" | "*" | "/" | "^"                                                              |
Rvalue: int | float                                                                             |
Lvalue: ident                                                                                   |
-------------------------------------------------------------------------------------------------
Priority of operators:                                                                          |
1: Function call.                                                                               |
2: Factorial operation ("!") and percent operation ("%"). Left-association.                     |
3: Power ("^"). Right-association.                                                              |
4: Unary plus ("+") and unary minus ("-"). Right-association.                                   |
5: Multiplication ("*") and division ("/"). Left-association.                                   |
6: Summation ("+") and subtraction ("-"). Left-association.                                     |
-------------------------------------------------------------------------------------------------
Formal grammar:                                                                                 |
-------------------------------------------------------------------------------------------------
Statement ::= ident assign #TokenToPostfix Expr #AssignToPostfix ENDLINE                        |
          |   Expr ENDLINE                                                                      |
          |   command #TokenToPostfix ENDLINE                                                   |
          |   ENDLINE                                                                           |
                                                                                                |
ENDLINE ::= EOF | EOL                                                                           |
                                                                                                |
Expr ::= ExprPriority6                                                                          |
ExprPriority6 ::= ExprPriority5 ExprPriority6Rest                                               |
ExprPriority6Rest ::= "+" ExprPriority5 #PlusToPostfix ExprPriority6Rest                        |
                  |   "-" ExprPriority5 #MinusToPostfix ExprPriority6Rest                       |
                  |   epsilon                                                                   |
ExprPriority5 ::= ExprPriority4 ExprPriority5Rest                                               |
ExprPriority5Rest ::= "*" ExprPriority4 #MulToPostfix ExprPriority5Rest                         |
                  |   "/" ExprPriority4 #DivToPostfix ExprPriority5Rest                         |
                  |   epsilon                                                                   |
ExprPriority4 ::= "+" ExprPriority4 #PlusToPostfix                                              |
              |   "-" ExprPriority4 #MinusToPostfix                                             |
              |   ExprPriority3                                                                 |
ExprPriority3 ::= ExprPriority2 ExprPriority3Rest                                               |
ExprPriority3Rest ::= "^" ExprPriority3 #PowToPostfix ExprPriority3Rest                         |
                  |   epsilon                                                                   |
ExprPriority2 ::= ExprPriority1 ExprPriority2Rest                                               |
ExprPriority2Rest ::= "!" #FactorialToPostfix ExprPriority2Rest                                 |
                  |   "%" #PercentToPostfix ExprPriority2Rest                                   |
                  |   epsilon                                                                   |
ExprPriority1 ::= ident #TokenToPostfix FunctionCallOrEpsilon                                   |
              |   int #TokenToPostfix                                                           |
              |   float #TokenToPostfix                                                         |
              |   "(" Expr ")"                                                                  |
FunctionCallOrEpsilon ::= "(" ActualArgumentsList ")" #InvokeToPostfix                          |
                      |   "(" ")" #InvokeToPostfix                                              |
                      |   epsilon                                                               |
ActualArgumentsList ::= Expr #PutArgToPostfix ActualArgumentsListRest                           |
ActualArgumentsListRest ::= "," Expr #PutArgToPostfix ActualArgumentsListRest                   |
                        |   Expr #PutArgToPostfix                                               |
------------------------------------------------------------------------------------------------|
Parser actions:                                                                                 |
------------------------------------------------------------------------------------------------|
TokenToPostfix ::= { toPostfix(curToken)) }                                                     |
AssignToPostfix ::= { toPostfix(Token(TokenType.OP, "=")) }                                     |
PlusToPostfix ::= { toPostfix(Token(TokenType.OP, "+")) }                                       |
MinusToPostfix ::= { toPostfix(Token(TokenType.OP, "-")) }                                      |
MulToPostfix ::= { toPostfix(Token(TokenType.OP, "*")) }                                        |
DivToPostfix ::= { toPostfix(Token(TokenType.OP, "/")) }                                        |
PowToPostfix ::= { toPostfix(Token(TokenType.OP, "^")) }                                        |
FactorialToPostfix ::= { toPostfix(Token(TokenType.OP, "!")) }                                  |
PercentToPostfix ::= { toPostfix(Token(TokenType.OP, "%")) }                                    |
InvokeToPostifx ::= { toPostfix("invoke") }                                                     |
PutArgToPostfix ::= { toPostfix("putArg") }                                                     |
-------------------------------------------------------------------------------------------------


